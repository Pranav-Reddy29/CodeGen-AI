import React, { useState } from 'react';
import { Sparkles, Box, Copy, Check, Save, FolderPlus, Download, Share2 } from 'lucide-react';
import { useProjects } from '../context/ProjectContext';
import { useAuth } from '../context/AuthContext';
import { aiAPI } from '../services/api';
import JSZip from 'jszip';
import { saveAs } from 'file-saver';

function Generator() {
  const { createProject } = useProjects();
  const { user } = useAuth();
  const [prompt, setPrompt] = useState('');
  const [generatedProject, setGeneratedProject] = useState(null);
  const [projectType, setProjectType] = useState('React App');
  const [copied, setCopied] = useState(false);
  const [isGenerating, setIsGenerating] = useState(false);
  const [isSaving, setIsSaving] = useState(false);
  const [showSaveModal, setShowSaveModal] = useState(false);
  const [projectName, setProjectName] = useState('');
  const [projectDescription, setProjectDescription] = useState('');
  const [selectedFile, setSelectedFile] = useState(0);
  const [autoSaveEnabled, setAutoSaveEnabled] = useState(true);
  const [autoSaveToast, setAutoSaveToast] = useState(false);

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!prompt.trim()) return;
    
    setIsGenerating(true);
    
    try {
      const response = await aiAPI.generateCode(prompt, projectType, projectType);
      setGeneratedProject(response.projectFiles);
      setCopied(false);
      setSelectedFile(0);
      // Auto-save if enabled
      if (autoSaveEnabled && response.projectFiles) {
        const defaultName = `${projectType} - ${new Date().toLocaleString()}`;
        const projectData = {
          name: defaultName,
          description: response.projectFiles.description || `Generated from prompt: "${prompt}"`,
          language: projectType,
          code: JSON.stringify(response.projectFiles, null, 2),
          tags: [projectType, 'Generated', 'AI', 'AutoSaved']
        };
        await createProject(projectData);
        setAutoSaveToast(true);
        setTimeout(() => setAutoSaveToast(false), 2500);
      }
    } catch (error) {
      console.error('Code generation failed:', error);
      
      // Show user-friendly error message
      const errorMessage = error.message || 'Failed to generate code';
      
      // Fallback to mock generation if AI service fails
      const mockProject = generateMockCompleteProject(prompt, projectType);
      setGeneratedProject(mockProject);
      setSelectedFile(0);
      
      // Auto-save if enabled
      if (autoSaveEnabled && mockProject) {
        const defaultName = `${projectType} - ${new Date().toLocaleString()}`;
        const projectData = {
          name: defaultName,
          description: mockProject.description || `Generated from prompt: "${prompt}"`,
          language: projectType,
          code: JSON.stringify(mockProject, null, 2),
          tags: [projectType, 'Generated', 'AI', 'AutoSaved']
        };
        await createProject(projectData);
        setAutoSaveToast(true);
        setTimeout(() => setAutoSaveToast(false), 2500);
      }
      // You could add a toast notification here
      console.warn('Using fallback code generation:', errorMessage);
    } finally {
      setIsGenerating(false);
    }
  };

  const generateMockCompleteProject = (prompt, type) => {
    const projectName = `${type.toLowerCase().replace(/\s+/g, '-')}-project`;
    
    switch (type) {
      case 'React App':
        return {
          projectName,
          description: `A complete ${type} project generated based on: ${prompt}`,
          files: [
            {
              path: 'package.json',
              content: `{
  "name": "${projectName}",
  "version": "1.0.0",
  "description": "${type} project",
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "dependencies": {
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-scripts": "5.0.1"
  }
}`
            },
            {
              path: 'src/App.js',
              content: `import React, { useState } from 'react';
import './App.css';

function App() {
  const [data, setData] = useState([]);

  return (
    <div className="App">
      <header className="App-header">
        <h1>Generated ${type}</h1>
        <p>Based on your prompt: "${prompt}"</p>
        <div className="project-info">
          <h2>Project Details</h2>
          <ul>
            <li>Type: ${type}</li>
            <li>Generated by: CodeGen AI</li>
          </ul>
        </div>
      </header>
    </div>
  );
}

export default App;`
            },
            {
              path: 'README.md',
              content: `# ${projectName}

Generated by CodeGen AI

## Description
${type} project based on: ${prompt}

## Installation
\`\`\`bash
npm install
\`\`\`

## Running the Project
\`\`\`bash
npm start
\`\`\`

The app will open on http://localhost:3000
`
            }
          ],
          instructions: `1. Open terminal in the project directory
2. Run: npm install
3. Run: npm start
4. The React app will open automatically in your browser`
        };
      
      default:
        return {
          projectName,
          description: `A complete ${type} project generated based on: ${prompt}`,
          files: [
            {
              path: 'README.md',
              content: `# ${projectName}

Generated by CodeGen AI

## Description
${type} project based on: ${prompt}

## Instructions
This is a ${type} project. Please refer to the specific documentation for setup and running instructions.
`
            }
          ],
          instructions: `This is a ${type} project. Please refer to the specific documentation for setup and running instructions.`
        };
    }
  };

  const handleCopy = () => {
    if (generatedProject && generatedProject.files[selectedFile]) {
      navigator.clipboard.writeText(generatedProject.files[selectedFile].content);
      setCopied(true);
      setTimeout(() => setCopied(false), 1500);
    }
  };

  const handleSaveToProjects = async () => {
    if (!projectName.trim() || !generatedProject) return;
    
    setIsSaving(true);
    
    const projectData = {
      name: projectName,
      description: projectDescription || generatedProject.description,
      language: projectType,
      code: JSON.stringify(generatedProject, null, 2),
      tags: [projectType, 'Generated', 'AI', 'Complete Project']
    };
    
    const created = await createProject(projectData);
    if (created) {
      setShowSaveModal(false);
      setProjectName('');
      setProjectDescription('');
    }
    
    setIsSaving(false);
  };

  const handleDownloadProject = () => {
    if (!generatedProject) return;
    const zip = new JSZip();
    generatedProject.files.forEach(file => {
      zip.file(file.path, file.content);
    });
    zip.generateAsync({ type: 'blob' }).then(content => {
      saveAs(content, `${generatedProject.projectName}.zip`);
    });
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-[#18181b] via-[#23232a] to-[#1e1b4b] flex flex-col items-center py-12 px-2 animate-fade-in-up overflow-x-hidden">
      {/* Sample Code Notice */}
      <div className="w-full max-w-3xl mx-auto mb-6">
        <div className="bg-yellow-900/80 border-l-4 border-yellow-400 text-yellow-200 px-6 py-4 rounded shadow animate-fade-in text-sm">
          <strong>Note:</strong> The generated projects and code samples are for demonstration purposes only and may not represent a complete, production-ready application. Please review and modify the code as needed for your use case.
        </div>
      </div>
      {/* Auto-Save Toast */}
      {autoSaveToast && (
        <div className="fixed bottom-6 left-1/2 transform -translate-x-1/2 z-50 bg-green-600 text-white px-6 py-3 rounded-lg shadow-lg animate-fade-in">
          Project auto-saved!
        </div>
      )}
      <h1 className="text-4xl font-extrabold text-center mb-10 bg-gradient-to-r from-fuchsia-400 to-blue-500 bg-clip-text text-transparent flex items-center justify-center gap-2">
        <Sparkles className="w-8 h-8 text-fuchsia-400 animate-pulse" /> Project Generator
      </h1>
      <div className="w-full max-w-6xl grid grid-cols-1 md:grid-cols-2 gap-8">
        {/* Left: Project Config */}
        <div className="bg-[#23232a] rounded-2xl shadow-lg p-8 flex flex-col gap-6 border border-purple-800 animate-fade-in-up">
          <h2 className="text-xl font-bold mb-2 text-fuchsia-400 flex items-center gap-2">
            Project Configuration
          </h2>
          <p className="text-gray-400 text-sm mb-4">Describe your project and choose the type</p>
          <form onSubmit={handleSubmit} className="flex flex-col gap-4">
            {/* Auto-Save Toggle */}
            <div className="flex items-center mb-2">
              <label className="flex items-center cursor-pointer select-none text-sm font-semibold text-gray-300">
                <input
                  type="checkbox"
                  checked={autoSaveEnabled}
                  onChange={() => setAutoSaveEnabled(v => !v)}
                  className="form-checkbox h-4 w-4 text-fuchsia-500 rounded focus:ring-fuchsia-500 mr-2"
                />
                Auto-Save Project
              </label>
              <span className={`ml-2 text-xs px-2 py-1 rounded ${autoSaveEnabled ? 'bg-green-600 text-white' : 'bg-gray-700 text-gray-300'}`}>{autoSaveEnabled ? 'ON' : 'OFF'}</span>
            </div>
            <div>
              <label className="block text-sm font-semibold mb-1 text-gray-300">Project Type</label>
              <select
                className="w-full bg-[#18181b] border border-purple-700 rounded-lg px-3 py-2 text-white focus:outline-none focus:ring-2 focus:ring-fuchsia-500 transition-all duration-200"
                value={projectType}
                onChange={e => setProjectType(e.target.value)}
              >
                <option>React App</option>
                <option>Next.js App</option>
                <option>Vue.js App</option>
                <option>Vanilla JS</option>
              </select>
            </div>
            <div>
              <label className="block text-sm font-semibold mb-1 text-gray-300">Project Description</label>
              <textarea
                className="w-full min-h-[100px] bg-[#18181b] border border-purple-700 rounded-lg px-3 py-2 text-white focus:outline-none focus:ring-2 focus:ring-fuchsia-500 transition-all duration-200 scrollbar-none hide-scrollbar"
                value={prompt}
                onChange={e => setPrompt(e.target.value)}
                placeholder="Describe the project you want to generate...\nExample: 'Create a todo list app with React and TypeScript. It should have the ability to add, edit, delete, and mark tasks as complete. Use a modern dark theme with smooth animations.'"
              />
            </div>
            <button
              type="submit"
              disabled={isGenerating}
              className="mt-2 bg-gradient-to-r from-fuchsia-500 to-blue-500 text-white px-6 py-2 rounded-lg font-semibold shadow transition-all duration-200 hover:scale-105 hover:from-fuchsia-600 hover:to-blue-600 focus:outline-none focus:ring-2 focus:ring-fuchsia-500 disabled:opacity-50 disabled:cursor-not-allowed disabled:transform-none flex items-center justify-center gap-2"
            >
              {isGenerating ? (
                <>
                  <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
                  Generating...
                </>
              ) : (
                <>
                  <Sparkles className="w-4 h-4" />
                  Generate Project
                </>
              )}
            </button>
          </form>
        </div>
        {/* Right: Generated Project or Empty State */}
        <div className="bg-[#23232a] rounded-2xl shadow-lg p-8 flex flex-col items-center justify-center border border-purple-800 min-h-[340px] animate-fade-in-up w-full">
          {generatedProject ? (
            <div className="w-full animate-fade-in">
              <div className="flex items-center justify-between mb-4">
                <h3 className="text-lg font-bold text-fuchsia-400">Generated Project</h3>
                <div className="flex gap-2">
                  <button
                    onClick={handleDownloadProject}
                    className="flex items-center gap-1 bg-gradient-to-r from-blue-500 to-purple-500 text-white px-3 py-1 rounded-lg text-sm font-semibold hover:from-blue-600 hover:to-purple-600 transition-all duration-200"
                  >
                    <Download className="w-4 h-4" />
                    Download
                  </button>
                  <button
                    onClick={() => setShowSaveModal(true)}
                    className="flex items-center gap-1 bg-gradient-to-r from-green-500 to-emerald-500 text-white px-3 py-1 rounded-lg text-sm font-semibold hover:from-green-600 hover:to-emerald-600 transition-all duration-200"
                  >
                    <Save className="w-4 h-4" />
                    Save
                  </button>
                  <button
                    className="flex items-center gap-1 bg-[#23232a] border border-purple-700 rounded-lg p-1 text-fuchsia-400 hover:bg-fuchsia-500 hover:text-white transition-all duration-200"
                    onClick={handleCopy}
                    title="Copy to clipboard"
                  >
                    {copied ? <Check className="w-4 h-4" /> : <Copy className="w-4 h-4" />}
                    <span className="text-xs font-semibold">{copied ? 'Copied!' : 'Copy'}</span>
                  </button>
                </div>
              </div>
              
              {/* Project Info */}
              <div className="bg-[#18181b] rounded-lg p-4 mb-4 border border-purple-700">
                <h4 className="text-fuchsia-400 font-semibold mb-2">{generatedProject.projectName}</h4>
                <p className="text-gray-300 text-sm mb-3">{generatedProject.description}</p>
                <div className="text-gray-400 text-xs">
                  <strong>Instructions:</strong> {generatedProject.instructions}
                </div>
              </div>

              {/* File Selector */}
              <div className="mb-4">
                <label className="block text-sm font-semibold mb-2 text-gray-300">Select File:</label>
                <select
                  className="w-full bg-[#18181b] border border-purple-700 rounded-lg px-3 py-2 text-white focus:outline-none focus:ring-2 focus:ring-fuchsia-500 transition-all duration-200"
                  value={selectedFile}
                  onChange={e => setSelectedFile(parseInt(e.target.value))}
                >
                  {generatedProject.files.map((file, index) => (
                    <option key={index} value={index}>{file.path}</option>
                  ))}
                </select>
              </div>

              {/* Code Display */}
              <div className="bg-[#18181b] rounded-lg p-4 text-left text-sm text-blue-100 overflow-x-auto max-h-[400px] border border-purple-700 transition-all duration-200">
                <pre className="whitespace-pre-wrap">{generatedProject.files[selectedFile]?.content}</pre>
              </div>
            </div>
          ) : (
            <div className="flex flex-col items-center justify-center h-full">
              <Box className="w-16 h-16 text-gray-500 mb-4 animate-pulse" />
              <div className="text-gray-400 text-lg font-semibold">No Project Generated</div>
              <div className="text-gray-500 text-sm mt-2 text-center">Enter a project description and click <span className="text-fuchsia-400 font-bold">Generate Project</span> to get started</div>
            </div>
          )}
        </div>
      </div>

      {/* Save to Projects Modal */}
      {showSaveModal && (
        <div className="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-60">
          <div className="bg-[#23232a] rounded-xl p-6 w-full max-w-md shadow-2xl relative animate-fade-in-up">
            <div className="flex items-center justify-between mb-6">
              <h2 className="text-xl font-semibold text-white">Save to Projects</h2>
              <button
                onClick={() => setShowSaveModal(false)}
                className="p-1 hover:bg-purple-900/60 rounded transition-colors"
                style={{ position: 'absolute', top: 16, right: 16 }}
              >
                <span className="text-gray-400 text-2xl">&times;</span>
              </button>
            </div>
            <div className="space-y-4">
              <div>
                <label className="block text-sm font-semibold mb-2 text-gray-300">Project Name</label>
                <input
                  type="text"
                  value={projectName}
                  onChange={(e) => setProjectName(e.target.value)}
                  className="w-full bg-[#18181b] border border-purple-700 rounded-lg px-4 py-3 text-white focus:outline-none focus:ring-2 focus:ring-fuchsia-500 transition-all duration-200"
                  placeholder="Enter project name"
                />
              </div>
              <div>
                <label className="block text-sm font-semibold mb-2 text-gray-300">Description (Optional)</label>
                <textarea
                  value={projectDescription}
                  onChange={(e) => setProjectDescription(e.target.value)}
                  className="w-full bg-[#18181b] border border-purple-700 rounded-lg px-4 py-3 text-white focus:outline-none focus:ring-2 focus:ring-fuchsia-500 transition-all duration-200"
                  placeholder="Enter project description"
                  rows="3"
                />
              </div>
            </div>
            <div className="flex gap-3 mt-6">
              <button
                onClick={handleSaveToProjects}
                disabled={isSaving || !projectName.trim()}
                className="flex-1 bg-gradient-to-r from-fuchsia-500 to-blue-500 text-white py-3 rounded-lg font-semibold hover:from-fuchsia-600 hover:to-blue-600 transition-all duration-200 disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center gap-2"
              >
                {isSaving ? (
                  <>
                    <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
                    Saving...
                  </>
                ) : (
                  <>
                    <Save className="w-4 h-4" />
                    Save Project
                  </>
                )}
              </button>
              <button
                onClick={() => setShowSaveModal(false)}
                className="px-6 py-3 bg-[#18181b] text-gray-300 rounded-lg border border-purple-700 hover:bg-purple-900/60 transition-all duration-200"
              >
                Cancel
              </button>
            </div>
          </div>
        </div>
      )}

    </div>
  );
}

export default Generator;